// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: neuron/v1/neuron.proto

package neuronv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mi11km/neuron-visualizer/server/proto/neuron/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NeuronServiceName is the fully-qualified name of the NeuronService service.
	NeuronServiceName = "neuron.v1.NeuronService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NeuronServiceListNeuronsProcedure is the fully-qualified name of the NeuronService's ListNeurons
	// RPC.
	NeuronServiceListNeuronsProcedure = "/neuron.v1.NeuronService/ListNeurons"
	// NeuronServiceGetNeuronShapeProcedure is the fully-qualified name of the NeuronService's
	// GetNeuronShape RPC.
	NeuronServiceGetNeuronShapeProcedure = "/neuron.v1.NeuronService/GetNeuronShape"
	// NeuronServiceGetMembranePotentialsProcedure is the fully-qualified name of the NeuronService's
	// GetMembranePotentials RPC.
	NeuronServiceGetMembranePotentialsProcedure = "/neuron.v1.NeuronService/GetMembranePotentials"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	neuronServiceServiceDescriptor                     = v1.File_neuron_v1_neuron_proto.Services().ByName("NeuronService")
	neuronServiceListNeuronsMethodDescriptor           = neuronServiceServiceDescriptor.Methods().ByName("ListNeurons")
	neuronServiceGetNeuronShapeMethodDescriptor        = neuronServiceServiceDescriptor.Methods().ByName("GetNeuronShape")
	neuronServiceGetMembranePotentialsMethodDescriptor = neuronServiceServiceDescriptor.Methods().ByName("GetMembranePotentials")
)

// NeuronServiceClient is a client for the neuron.v1.NeuronService service.
type NeuronServiceClient interface {
	// 利用可能なニューロン名の一覧を取得する
	ListNeurons(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListNeuronsResponse], error)
	// ニューロンの形状・空間情報を取得する
	GetNeuronShape(context.Context, *connect.Request[v1.GetNeuronShapeRequest]) (*connect.Response[v1.GetNeuronShapeResponse], error)
	// ニューロンの各コンパートメントの膜電位を得る
	GetMembranePotentials(context.Context, *connect.Request[v1.GetMembranePotentialsRequest]) (*connect.ServerStreamForClient[v1.GetMembranePotentialsResponse], error)
}

// NewNeuronServiceClient constructs a client for the neuron.v1.NeuronService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNeuronServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NeuronServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &neuronServiceClient{
		listNeurons: connect.NewClient[emptypb.Empty, v1.ListNeuronsResponse](
			httpClient,
			baseURL+NeuronServiceListNeuronsProcedure,
			connect.WithSchema(neuronServiceListNeuronsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNeuronShape: connect.NewClient[v1.GetNeuronShapeRequest, v1.GetNeuronShapeResponse](
			httpClient,
			baseURL+NeuronServiceGetNeuronShapeProcedure,
			connect.WithSchema(neuronServiceGetNeuronShapeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMembranePotentials: connect.NewClient[v1.GetMembranePotentialsRequest, v1.GetMembranePotentialsResponse](
			httpClient,
			baseURL+NeuronServiceGetMembranePotentialsProcedure,
			connect.WithSchema(neuronServiceGetMembranePotentialsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// neuronServiceClient implements NeuronServiceClient.
type neuronServiceClient struct {
	listNeurons           *connect.Client[emptypb.Empty, v1.ListNeuronsResponse]
	getNeuronShape        *connect.Client[v1.GetNeuronShapeRequest, v1.GetNeuronShapeResponse]
	getMembranePotentials *connect.Client[v1.GetMembranePotentialsRequest, v1.GetMembranePotentialsResponse]
}

// ListNeurons calls neuron.v1.NeuronService.ListNeurons.
func (c *neuronServiceClient) ListNeurons(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListNeuronsResponse], error) {
	return c.listNeurons.CallUnary(ctx, req)
}

// GetNeuronShape calls neuron.v1.NeuronService.GetNeuronShape.
func (c *neuronServiceClient) GetNeuronShape(ctx context.Context, req *connect.Request[v1.GetNeuronShapeRequest]) (*connect.Response[v1.GetNeuronShapeResponse], error) {
	return c.getNeuronShape.CallUnary(ctx, req)
}

// GetMembranePotentials calls neuron.v1.NeuronService.GetMembranePotentials.
func (c *neuronServiceClient) GetMembranePotentials(ctx context.Context, req *connect.Request[v1.GetMembranePotentialsRequest]) (*connect.ServerStreamForClient[v1.GetMembranePotentialsResponse], error) {
	return c.getMembranePotentials.CallServerStream(ctx, req)
}

// NeuronServiceHandler is an implementation of the neuron.v1.NeuronService service.
type NeuronServiceHandler interface {
	// 利用可能なニューロン名の一覧を取得する
	ListNeurons(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListNeuronsResponse], error)
	// ニューロンの形状・空間情報を取得する
	GetNeuronShape(context.Context, *connect.Request[v1.GetNeuronShapeRequest]) (*connect.Response[v1.GetNeuronShapeResponse], error)
	// ニューロンの各コンパートメントの膜電位を得る
	GetMembranePotentials(context.Context, *connect.Request[v1.GetMembranePotentialsRequest], *connect.ServerStream[v1.GetMembranePotentialsResponse]) error
}

// NewNeuronServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNeuronServiceHandler(svc NeuronServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	neuronServiceListNeuronsHandler := connect.NewUnaryHandler(
		NeuronServiceListNeuronsProcedure,
		svc.ListNeurons,
		connect.WithSchema(neuronServiceListNeuronsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	neuronServiceGetNeuronShapeHandler := connect.NewUnaryHandler(
		NeuronServiceGetNeuronShapeProcedure,
		svc.GetNeuronShape,
		connect.WithSchema(neuronServiceGetNeuronShapeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	neuronServiceGetMembranePotentialsHandler := connect.NewServerStreamHandler(
		NeuronServiceGetMembranePotentialsProcedure,
		svc.GetMembranePotentials,
		connect.WithSchema(neuronServiceGetMembranePotentialsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/neuron.v1.NeuronService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NeuronServiceListNeuronsProcedure:
			neuronServiceListNeuronsHandler.ServeHTTP(w, r)
		case NeuronServiceGetNeuronShapeProcedure:
			neuronServiceGetNeuronShapeHandler.ServeHTTP(w, r)
		case NeuronServiceGetMembranePotentialsProcedure:
			neuronServiceGetMembranePotentialsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNeuronServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNeuronServiceHandler struct{}

func (UnimplementedNeuronServiceHandler) ListNeurons(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListNeuronsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neuron.v1.NeuronService.ListNeurons is not implemented"))
}

func (UnimplementedNeuronServiceHandler) GetNeuronShape(context.Context, *connect.Request[v1.GetNeuronShapeRequest]) (*connect.Response[v1.GetNeuronShapeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neuron.v1.NeuronService.GetNeuronShape is not implemented"))
}

func (UnimplementedNeuronServiceHandler) GetMembranePotentials(context.Context, *connect.Request[v1.GetMembranePotentialsRequest], *connect.ServerStream[v1.GetMembranePotentialsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("neuron.v1.NeuronService.GetMembranePotentials is not implemented"))
}
