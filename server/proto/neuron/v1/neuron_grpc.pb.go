// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: neuron/v1/neuron.proto

package neuronv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NeuronService_ListNeurons_FullMethodName           = "/neuron.v1.NeuronService/ListNeurons"
	NeuronService_GetNeuronShape_FullMethodName        = "/neuron.v1.NeuronService/GetNeuronShape"
	NeuronService_GetMembranePotentials_FullMethodName = "/neuron.v1.NeuronService/GetMembranePotentials"
)

// NeuronServiceClient is the client API for NeuronService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeuronServiceClient interface {
	// 利用可能なニューロン名の一覧を取得する
	ListNeurons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNeuronsResponse, error)
	// ニューロンの形状・空間情報を取得する
	GetNeuronShape(ctx context.Context, in *GetNeuronShapeRequest, opts ...grpc.CallOption) (*GetNeuronShapeResponse, error)
	// ニューロンの各コンパートメントの膜電位を得る
	GetMembranePotentials(ctx context.Context, in *GetMembranePotentialsRequest, opts ...grpc.CallOption) (NeuronService_GetMembranePotentialsClient, error)
}

type neuronServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNeuronServiceClient(cc grpc.ClientConnInterface) NeuronServiceClient {
	return &neuronServiceClient{cc}
}

func (c *neuronServiceClient) ListNeurons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNeuronsResponse, error) {
	out := new(ListNeuronsResponse)
	err := c.cc.Invoke(ctx, NeuronService_ListNeurons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuronServiceClient) GetNeuronShape(ctx context.Context, in *GetNeuronShapeRequest, opts ...grpc.CallOption) (*GetNeuronShapeResponse, error) {
	out := new(GetNeuronShapeResponse)
	err := c.cc.Invoke(ctx, NeuronService_GetNeuronShape_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuronServiceClient) GetMembranePotentials(ctx context.Context, in *GetMembranePotentialsRequest, opts ...grpc.CallOption) (NeuronService_GetMembranePotentialsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NeuronService_ServiceDesc.Streams[0], NeuronService_GetMembranePotentials_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &neuronServiceGetMembranePotentialsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NeuronService_GetMembranePotentialsClient interface {
	Recv() (*GetMembranePotentialsResponse, error)
	grpc.ClientStream
}

type neuronServiceGetMembranePotentialsClient struct {
	grpc.ClientStream
}

func (x *neuronServiceGetMembranePotentialsClient) Recv() (*GetMembranePotentialsResponse, error) {
	m := new(GetMembranePotentialsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NeuronServiceServer is the server API for NeuronService service.
// All implementations should embed UnimplementedNeuronServiceServer
// for forward compatibility
type NeuronServiceServer interface {
	// 利用可能なニューロン名の一覧を取得する
	ListNeurons(context.Context, *emptypb.Empty) (*ListNeuronsResponse, error)
	// ニューロンの形状・空間情報を取得する
	GetNeuronShape(context.Context, *GetNeuronShapeRequest) (*GetNeuronShapeResponse, error)
	// ニューロンの各コンパートメントの膜電位を得る
	GetMembranePotentials(*GetMembranePotentialsRequest, NeuronService_GetMembranePotentialsServer) error
}

// UnimplementedNeuronServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNeuronServiceServer struct {
}

func (UnimplementedNeuronServiceServer) ListNeurons(context.Context, *emptypb.Empty) (*ListNeuronsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNeurons not implemented")
}
func (UnimplementedNeuronServiceServer) GetNeuronShape(context.Context, *GetNeuronShapeRequest) (*GetNeuronShapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeuronShape not implemented")
}
func (UnimplementedNeuronServiceServer) GetMembranePotentials(*GetMembranePotentialsRequest, NeuronService_GetMembranePotentialsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMembranePotentials not implemented")
}

// UnsafeNeuronServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeuronServiceServer will
// result in compilation errors.
type UnsafeNeuronServiceServer interface {
	mustEmbedUnimplementedNeuronServiceServer()
}

func RegisterNeuronServiceServer(s grpc.ServiceRegistrar, srv NeuronServiceServer) {
	s.RegisterService(&NeuronService_ServiceDesc, srv)
}

func _NeuronService_ListNeurons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuronServiceServer).ListNeurons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuronService_ListNeurons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuronServiceServer).ListNeurons(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuronService_GetNeuronShape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeuronShapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuronServiceServer).GetNeuronShape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuronService_GetNeuronShape_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuronServiceServer).GetNeuronShape(ctx, req.(*GetNeuronShapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuronService_GetMembranePotentials_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMembranePotentialsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NeuronServiceServer).GetMembranePotentials(m, &neuronServiceGetMembranePotentialsServer{stream})
}

type NeuronService_GetMembranePotentialsServer interface {
	Send(*GetMembranePotentialsResponse) error
	grpc.ServerStream
}

type neuronServiceGetMembranePotentialsServer struct {
	grpc.ServerStream
}

func (x *neuronServiceGetMembranePotentialsServer) Send(m *GetMembranePotentialsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NeuronService_ServiceDesc is the grpc.ServiceDesc for NeuronService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeuronService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neuron.v1.NeuronService",
	HandlerType: (*NeuronServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNeurons",
			Handler:    _NeuronService_ListNeurons_Handler,
		},
		{
			MethodName: "GetNeuronShape",
			Handler:    _NeuronService_GetNeuronShape_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMembranePotentials",
			Handler:       _NeuronService_GetMembranePotentials_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "neuron/v1/neuron.proto",
}
